{"version":3,"sources":["components/ProjectItem.js","components/Projects.js","components/AddProject.js","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","id","this","props","onDelete","className","project","title","category","href","onClick","deleteProject","bind","React","Component","Projects","projectItems","projects","map","key","AddProject","state","newProject","e","refs","value","alert","setState","uuidv4","addProject","preventDefault","categoryOptions","categories","onSubmit","handleSubmit","type","ref","defaultProps","App","push","index","findIndex","x","splice","handleAddProject","handleDeleteProject","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03cf68bd.chunk.js","sourcesContent":["import React from 'react';\n\nclass ProjectItem extends React.Component {\n    deleteProject(id){\n        this.props.onDelete(id);\n    }\n\n    render() {\n        return (\n            <li className=\"Project\">\n                <strong>{this.props.project.title}</strong>: {this.props.project.category} <a href=\"#\" onClick={this.deleteProject.bind(this, this.props.project.id)}>X</a>\n            </li>\n        );\n    }\n}\n\nexport default ProjectItem;\n","import React from 'react';\nimport ProjectItem from './ProjectItem';\n\nclass Projects extends React.Component {\n    deleteProject(id){\n        this.props.onDelete(id);\n    }\n\n\n    render() {\n\n        let projectItems;\n    if(this.props.projects){\n        projectItems = this.props.projects.map(project => {\n            //console.log(project);\n            return (\n                <ProjectItem onDelete={this.deleteProject.bind(this)} key={project.title} project={project} />\n            );\n        });\n    }\n\n\n        return (\n            <div className=\"Projects\">\n                <h3>Latest Projects</h3>\n                {projectItems}\n            </div>\n        );\n    }\n}\n\nexport default Projects;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass AddProject extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            newProject: {}\n        }\n    }\n\n    static defaultProps = {\n        categories: ['Web Design', 'Web Development', 'Mobile Development']\n    }\n\n    handleSubmit(e) {\n        if(this.refs.title.value === ''){\n            alert('Title is required');\n        } else {\n            this.setState({newProject:{\n                id: uuidv4(), \n                title: this.refs.title.value,\n                category: this.refs.category.value\n            }}, function(){\n                //console.log(this.state);\n                this.props.addProject(this.state.newProject);\n            });\n        }\n        e.preventDefault();\n    }\n\n    render() {\n            let categoryOptions = this.props.categories.map(category => {\n                return <option key={category} value={category}>{category}</option>\n            });\n            return (\n                <div>\n                    <h3>Add Project</h3>\n                    <form onSubmit={this.handleSubmit.bind(this)}>\n                        <div>\n                            <label>Title</label><br />\n                            <input type=\"text\" ref=\"title\" />\n                        </div>\n                        <div>\n                            <label>Category</label><br />\n                            <select ref=\"category\">\n                                {categoryOptions}\n                            </select>\n                        </div>\n                        <br />\n                        <input type=\"submit\" value=\"Submit\" />\n                        <br />\n                    </form>\n                </div>\n            );\n        }\n    }\n\nexport default AddProject;\n","import React from 'react';\nimport Projects from './components/Projects';\nimport AddProject from './components/AddProject';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      projects: []\n    }\n  }\n\n  componentWillMount(){\n    this.setState({\n      projects: [\n        {\n          id: uuidv4(),\n          title: 'Business Website',\n          category: 'Web Design'\n        },\n        {\n          id: uuidv4(),\n          title: 'Social App',\n          category: 'Mobile Development'\n        },\n        {\n          id: uuidv4(),\n          title: 'Ecommerce Shopping Cart',\n          category: 'Web Development'\n        }\n      ]\n    });\n  }\n\n  handleAddProject(project){\n    let projects = this.state.projects;\n    projects.push(project);\n    this.setState({projects:projects});\n  }\n\n  handleDeleteProject(id){\n    let projects = this.state.projects;\n    let index = projects.findIndex(x => x.id === id);\n    projects.splice(index, 1);\n    this.setState({projects:projects});\n  }\n\n  render() {\n      return (\n        <div className=\"App\">\n          <AddProject addProject={this.handleAddProject.bind(this)} />\n          <Projects projects={this.state.projects} onDelete={this.handleDeleteProject.bind(this)} />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}